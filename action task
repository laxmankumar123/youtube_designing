Youtube Like System Design

✅ 1. Define Data Models (Entities)
User (id, name, email, password, etc.)


Video (id, user_id, title, description, file_path, upload_date, etc.)


Comment (id, user_id, video_id, text, timestamp)


Reaction (id, user_id, video_id, type → like or dislike)



✅ 2. Design Database Schema
Write tables for each entity. Example (simplified):
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    password VARCHAR(255)
);

CREATE TABLE videos (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    title VARCHAR(255),
    description TEXT,
    file_path VARCHAR(255),
    upload_date TIMESTAMP
);

CREATE TABLE comments (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    video_id INTEGER REFERENCES videos(id),
    text TEXT,
    timestamp TIMESTAMP
);

CREATE TABLE reactions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    video_id INTEGER REFERENCES videos(id),
    type VARCHAR(10)  -- 'like' or 'dislike'
);


✅ 3. Design API Endpoints
For each functionality:
Upload Video → POST /videos/upload


Get Video → GET /videos/{id}


Like/Dislike Video → POST /videos/{id}/reaction


Add Comment → POST /videos/{id}/comment


Search Videos → GET /videos/search?q=keyword



✅ 4. Build Basic Frontend Pages
Video Upload Page


Video Watch Page (with Like/Dislike buttons, Comments section)


Search Page



✅ 5. Implement Backend Logic
Handle file upload (store video files locally)


Store metadata in DB


Handle reactions and comments


Implement search logic (simple title or description search)



Would you like me to help you start designing the database schema or API endpoints next?

